name: Publish to Cloudflare Pages
on:
  push:
    branches: [main]

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  PAGES_PROJECT_NAME: ${{ vars.PAGES_PROJECT_NAME }}

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if Cloudflare Pages Project exists
        shell: bash
        id: check_project
        run: |
          check=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PAGES_PROJECT_NAME" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type:application/json" | jq -r '.success')
          echo "result=$check" >> $GITHUB_OUTPUT
  
      - name: Create Cloudflare Pages Project
        shell: bash
        if: steps.check_project.outputs.result != 'true'
        run: |
          curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type:application/json" \
            --data '{"name":"$PAGES_PROJECT_NAME", "production_branch":"${GITHUB_REF/refs\/heads\//}"}'

      - name: Create GitHub Deployment
        uses: actions/github-script@v4
        id: create_github_deployment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const githubBranch = process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF_NAME;
            const deployment = await github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: githubBranch || context.ref,
              auto_merge: false,
              description: "Cloudflare Pages",
              required_contexts: [],
              environment: 'Landscape Rickroll (Production)',
              production_environment: true,
            });
            console.dir(deployment);
            
            if (deployment.status === 201) {
              core.setOutput('id', deployment.data.id);
              return deployment.data;
            } else {
              throw new Error(`Failed to create deployment: ${deployment.status}`);
            }

      - name: Deploy
        run: |
          npx wrangler@3 pages deploy . \
          --project-name="$PAGES_PROJECT_NAME" \
          --branch="$PAGES_BRANCH"

      - name: Get Latest Deployment ID
        shell: bash
        id: get_deployment
        run: |
          deployment=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PAGES_PROJECT_NAME/deployments" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type:application/json" | jq -r '.result[0]')
          echo "id=$(echo $deployment | jq -r .id)" >> $GITHUB_OUTPUT
          echo "url=$(echo $deployment | jq -r .url)" >> $GITHUB_OUTPUT
        

      - name: Create GitHub Deployment Status
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { CLOUDFLARE_ACCOUNT_ID, PAGES_PROJECT_NAME } = process.env;
            let deploymentId = "${{ steps.get_deployment.outputs.id }}";
            let environmentUrl = "${{ steps.get_deployment.outputs.url }}";

            const deploymentStatus = await github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: "${{ steps.create_github_deployment.outputs.id }}",
              state: 'success',
              log_url: `https://dash.cloudflare.com/${CLOUDFLARE_ACCOUNT_ID}/pages/view/${PAGES_PROJECT_NAME}/${deploymentId}`,
              description: 'Cloudflare Pages',
              environment_url: environmentUrl,
              environment: 'Landscape Rickroll (Production)',
            });
            console.dir(deploymentStatus);
